"***********************************************"
"                                               "
"   ██╗   ██╗██╗███╗   ███╗██████╗  ██████╗     "
"   ██║   ██║██║████╗ ████║██╔══██╗██╔════╝     "
"   ██║   ██║██║██╔████╔██║██████╔╝██║          "
"   ╚██╗ ██╔╝██║██║╚██╔╝██║██╔══██╗██║          "
"    ╚████╔╝ ██║██║ ╚═╝ ██║██║  ██║╚██████╗     "
"     ╚═══╝  ╚═╝╚═╝     ╚═╝╚═╝  ╚═╝ ╚═════╝     "
"                                               "
"***********************************************"

"************************************************
"" Vim-Plug core
"************************************************
let vimplug_exists=expand('~/.vim/autoload/plug.vim')
if has('win32')&&!has('win64')
    let curl_exists=expand('C:\Windows\Sysnative\curl.exe')
else
    let curl_exists=expand('curl')
endif

let g:vim_bootstrap_langs = "c"
let g:vim_bootstrap_editor = "vim"				" nvim or vim
let g:vim_bootstrap_theme = "gruvbox"
let g:vim_bootstrap_frams = ""

if !filereadable(vimplug_exists)
    if !executable(curl_exists)
        echoerr "You have to install curl or first install vim-plug yourself!"
        execute "q!"
    endif
    echo "Installing Vim-Plug..."
    echo ""
    silent exec "!"curl_exists" -fLo " . shellescape(vimplug_exists) . " --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"
    let g:not_finish_vimplug = "yes"

    autocmd VimEnter * PlugInstall
endif

"************************************************
"" Plug install packages
"************************************************
call plug#begin(expand('~/.vim/plugged'))
Plug 'scrooloose/nerdtree'
Plug 'jistr/vim-nerdtree-tabs'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb' " required by fugitive to :Gbrowse
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'airblade/vim-gitgutter'
Plug 'vim-scripts/grep.vim' " grep in quickfix
Plug 'vim-scripts/CSApprox' " colorscheme gvim compatible
Plug 'majutsushi/tagbar'
Plug 'dense-analysis/ale'
Plug 'Yggdroot/indentLine'
Plug 'ycm-core/YouCompleteMe' " Completion
Plug 'rdnetto/YCM-Generator', { 'branch': 'stable'}
Plug 'SirVer/ultisnips'
Plug 'morhetz/gruvbox'
Plug 'ludovicchabant/vim-gutentags'
Plug 'wincent/command-t'
Plug 'bogado/file-line' " open file:line syntax : vim file:linenumber
Plug 'skywind3000/asyncrun.vim'
Plug 'ryanoasis/vim-devicons' " Icons
Plug 'sheerun/vim-polyglot' " Syntax detection
Plug 'lambdalisue/fern.vim'
Plug 'lambdalisue/fern-git-status.vim'
Plug 'lambdalisue/glyph-palette.vim'
Plug 'lambdalisue/nerdfont.vim'
Plug 'lambdalisue/fern-renderer-nerdfont.vim'
Plug 'lambdalisue/fern-hijack.vim'

" Test startify
Plug 'mhinz/vim-startify'
call plug#end()

filetype plugin indent on

"************************************************
"" Basic Setup
"************************************************
" No fix end of line
set nofixeol

" Encoding
set encoding=UTF-8
set fileencoding=UTF-8
set fileencodings=UTF-8
set ttyfast

" Fix backspace indent
set backspace=indent,eol,start

" Tabs. May be overridden by autocmd rules
set tabstop=4
set softtabstop=0
set shiftwidth=4
set expandtab

" Open diff in vertical split
set diffopt+=vertical

" Map leader to ,
let mapleader=','

" Enable hidden buffers
set hidden

" Searching
set hlsearch
set incsearch
set ignorecase
set smartcase

set fileformats=unix,dos,mac

if exists('$SHELL')
    set shell=$SHELL
else
    set shell=/bin/sh
endif

"************************************************
"" Visual Settings
"************************************************
syntax on
set ruler
set number
set rnu
set cursorline

let no_buffers_menu=1

" colorscheme
silent! colorscheme gruvbox
set background=dark

" Comment highlight
highlight Comment ctermfg=208
highlight Comment cterm=italic

" Better command line completion
set wildmenu
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.pyc,__pycache__
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.pyc,*.db,*.sqlite,*node_modules/

" mouse support
set mouse=a

set mousemodel=popup
set t_Co=256
set guioptions=egmrti
set gfn=Monospace\ 10

if has("gui_running")
    if has("gui_mac") || has("gui_macvim")
        set guifont=DroidSansMono\ Nerd\ Font\ 11
        set transparency=7
    endif
else
    let g:CSApprox_loaded = 1

    " IndentLine
    let g:indentLine_enabled = 1
    let g:indentLine_concealcursor = ''
    let g:indentLine_char = '┆'
    let g:indentLine_faster = 1

    if $COLORTERM == 'gnome-terminal'
        set term=gnome-256color
    else
        if $TERM == 'xterm'
            set term=xterm-256color
        endif
    endif
endif

if &term =~ '256color'
  set t_ut=
endif

" Disable the blinking cursor.
set gcr=a:blinkon0

" Scroll limiter
set scrolloff=3

" Status bar
set laststatus=2

" Use modeline overrides
set modeline
set modelines=10

set title
set titleold="Terminal"
set titlestring=%F

set statusline=%F%m%r%h%w%=(%{&ff}/%Y)\ (line\ %l\/%L,\ col\ %c)\

" Remove preview window
set completeopt-=preview

" Read file again when has changed
set autoread

if exists("*fugitive#statusline")
    set statusline+=%{fugitive#statusline()}
endif

" Disable visualbell
set noerrorbells visualbell t_vb=
if has('autocmd')
    autocmd GUIEnter * set visualbell t_vb=
endif

" Copy/Paste/Cut
if has('unnamedplus')
  set clipboard=unnamed,unnamedplus
endif

"************************************************
"" Plugin Configuration
"************************************************
" vim-airline
let g:airline_theme = 'base16'
let g:airline_section_x = ''
let g:airline_section_y = ''
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'unique_tail'
let g:airline#extensions#tabline#buffer_min_count = 2
let g:airline#extensions#tabline#show_buffers = 0
let g:airline#extensions#tabline#show_splits = 0
let g:airline#extensions#tabline#show_tabs = 1
let g:airline#extensions#tabline#show_tab_nr = 0
let g:airline#extensions#tabline#show_tab_type = 0
let g:airline#extensions#tabline#close_symbol = '×'
let g:airline#extensions#tabline#show_close_button = 0
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#branch#displayed_head_limit = 20
let g:airline#extensions#branch#format = 2
let g:airline#extensions#ale#enabled = 1
let g:airline#extensions#tagbar#enabled = 1
let g:airline#extensions#nerdtree#enabled = 1
let g:airline#extensions#hunks#enabled = 0
let g:airline_skip_empty_sections = 1

" Vim-Startify
let g:startify_change_to_dir = 0
let g:startify_change_to_vcs_root = 0

" https://github.com/jistr/vim-nerdtree-tabs
let g:nerdtree_tabs_open_on_gui_startup=1
let g:nerdtree_tabs_open_on_console_startup=0
let g:nerdtree_tabs_no_startup_for_diff=1
let g:nerdtree_tabs_smart_startup_focus=1
let g:nerdtree_tabs_open_on_new_tab=1
let g:nerdtree_tabs_meaningful_tab_names=1
let g:nerdtree_tabs_autoclose=0
let g:nerdtree_tabs_synchronize_view=0
let g:nerdtree_tabs_synchronize_focus=1
let g:nerdtree_tabs_focus_on_files=1
let g:nerdtree_tabs_startup_cd=1
let g:nerdtree_tabs_autofind=0

" gutentags configuration
let g:gutentags_add_default_project_roots = 0
let g:gutentags_project_root = ['.git', 'README', 'boost.css', 'alarms.pl', 'AGENT.txt']
let g:gutentags_cache_dir = expand('~/.cache/vim/ctags/')
let g:gutentags_generate_on_new = 1
let g:gutentags_generate_on_missing = 1
let g:gutentags_generate_on_write = 1
let g:gutentags_generate_on_empty_buffer = 0
let g:gutentags_ctags_extra_args = ['--tag-relative=yes', '--fields=+aimS']
let g:gutentags_ctags_exclude = [
    \ 'build*', '*.git', '*.swp', '*.swo', '*.log*', '*.o', 'objs', '*.a', '*.txt',
    \ 'Makefile', 'tags', '*.yml', '*.pcap', '*.pcapng', '*.sh', '*.md',
    \ '*.lock', '*.json', '*.map', '*.bak', '*.zip', '*.pyc', '*.class', '*.sln',
    \ '*.Master', '*.csproj', '*.tmp', '*.csproj.user', '*.cache', '*.pdb', 'cscope.*',
    \ '*.css', '*.less', '*.scss', '*.exe', '*.dll', '*.ogg', '*.rar', '*.zip',
    \ '*.tar', '*.tar.gz', '*.tar.xz', '*.tar.bz2', '*.pdf', '*.doc', '*.docx',
    \ '*.ppt', '*.pptx']

" snippets
let g:UltiSnipsExpandTrigger="<c-s>"
let g:UltiSnipsJumpForwardTrigger="<c-f>"
let g:UltiSnipsJumpBackwardTrigger="<c-d>"
let g:UltiSnipsEditSplit="vertical"

" gitgutter
let g:gitgutter_enabled = 0

" CommandT
let g:CommandTMaxFiles=200000
let g:CommandTSuppressMaxFilesWarning=1

" ale
let g:ale_enabled = 0
let g:ale_completion_enabled = 1
let g:ale_linters = {}
let g:ale_sign_column_always = 0
let g:ale_sign_error = '>>'
let g:ale_sign_warning = '--'

" fern
let g:fern#renderer = "nerdfont"

" YouCompleteMe
let g:ycm_global_ycm_extra_conf = '~/.cache/vim/ycm/ycm_extra_conf.py'
let g:ycm_show_diagnostics_ui = 0
let g:ycm_key_list_select_completion = ['`']
let g:ycm_key_list_previous_completion = ['~']
let g:ycm_cache_omnifunc = 1
let g:ycm_confirm_extra_conf = 0
let g:ycm_seed_identifiers_with_syntax = 0
let g:ycm_collect_identifiers_from_tags_files = 0
let g:ycm_disable_for_files_larger_than_kb = 1000
let g:ycm_min_num_of_chars_for_completion = 2
let g:ycm_min_num_identifier_candidate_chars = 0
let g:ycm_max_num_candidates = 50

" grep.vim
let Grep_Default_Options = '-IR'
let Grep_Skip_Files = '*.log *.db'
let Grep_Skip_Dirs = '.git node_modules'

" Tagbar
let g:tagbar_autofocus = 1

" AsyncRun
let g:asyncrun_open = 15

"************************************************
"" Abbreviations
"************************************************
cnoreabbrev W! w!
cnoreabbrev Q! q!
cnoreabbrev Qall! qall!
cnoreabbrev Wq wq
cnoreabbrev Wa wa
cnoreabbrev wQ wq
cnoreabbrev WQ wq
cnoreabbrev W w
cnoreabbrev Q q
cnoreabbrev Qall qall

"************************************************
"" Commands
"************************************************
" Remove trailing whitespaces
command! FixWhitespace :%s/\s\+$//e

" Replace tabs for 4 spaces
command! FixTabtospace :%s/\t/\ \ \ \ /e

" Clear tags
command! -nargs=0 GutentagsClearCache call system('rm ' . g:gutentags_cache_dir . '/*')

"************************************************
"" Functions
"************************************************
if !exists('*s:setupWrapping')
  function s:setupWrapping()
    set wrap
    set wm=2
    set textwidth=79
  endfunction
endif

"************************************************
"" Autocmd Rules
"************************************************
" Icon on fern
augroup my-glyph-palette
	autocmd!
	autocmd FileType fern call glyph_palette#apply()
	autocmd FileType nerdtree,fern call glyph_palette#apply()
augroup END

" The PC is fast enough, do syntax highlight syncing from start unless 200 lines
augroup vimrc-sync-fromstart
    autocmd!
    autocmd BufEnter * :syntax sync maxlines=200
augroup END

" Remember cursor position
augroup vimrc-remember-cursor-position
    autocmd!
    autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
augroup END

" txt
augroup vimrc-wrapping
    autocmd!
    autocmd BufRead,BufNewFile *.txt call s:setupWrapping()
augroup END

" make/cmake
augroup vimrc-make-cmake
    autocmd!
    autocmd FileType make setlocal noexpandtab
    autocmd BufNewFile,BufRead CMakeLists.txt setlocal filetype=cmake
augroup END

"************************************************
"" Plugin Mappings
"************************************************
" grep.vim
nnoremap <silent> <leader>f :Rgrep<CR>

" terminal emulation
nnoremap <silent> <leader>sh :terminal<CR>

" AsyncRun
nnoremap <F1> :AsyncRun /bin/zsh -i -c 'ag '<left>

" Fern
nnoremap <silent> <F2> :Fern . -drawer -toggle<CR>
nnoremap <silent> <F3> :Fern %:h -reveal=% -drawer -toggle<CR>

" Tagbar
noremap <silent> <F4> :TagbarOpenAutoClose<CR>

" Toggle gitgutter
nnoremap <silent> <F5> :GitGutterToggle<CR>

" Toggle ALE
nnoremap <silent> <F6> :ALEToggle<CR>

" Clean tags
noremap <F7> :GutentagsClearCache<CR>

" Generate File for YCM and Color_coded
noremap <F8> :YcmGenerateConfig<CR>:CCGenerateConfig<CR>

command! -nargs=1 Silent
			\   execute 'silent !' . <q-args>
			\ | execute 'redraw!'

"************************************************
"" Mappings
"************************************************
" Center line after search
nnoremap n nzzzv
nnoremap N Nzzzv

" Go to first char on line #
noremap ^ #
noremap # ^

" Copy/Delete in word
noremap Y yiw
noremap D diw

" Redo
nnoremap U <C-r>

" Join lines
noremap <C-n> J

" Move fast verticaly
noremap J <C-d>
noremap K <C-u>

" Jump Definition
noremap ' <C-]>
noremap <Leader>' <C-w><C-]>
noremap ; <C-t>

" Open file under cursor
noremap glf :vertical wincmd f<CR>
noremap gnf <C-w>f
noremap gtf <C-w>gf

" Split
noremap <Leader>h :<C-u>split<CR>
noremap <Leader>v :<C-u>vsplit<CR>

" CommandT
let g:CommandTPreferredImplementation='ruby'
noremap <silent> <leader>/ :CommandT<CR>

" Tabs
noremap <leader><Tab> gt
noremap <leader><S-Tab> gT
noremap <leader>t :tabnew<CR>
noremap <leader>1 1gt
noremap <leader>2 2gt
noremap <leader>3 3gt
noremap <leader>4 4gt
noremap <leader>5 5gt
noremap <leader>6 6gt
noremap <leader>7 7gt
noremap <leader>8 8gt
noremap <leader>9 9gt
noremap <leader>0 :tablast<CR>

" Opens an edit command with the path of the currently edited file filled in
noremap <Leader>e :e <C-R>=expand("%:p:h") . "/" <CR>

" Buffer nav
noremap <leader>q :bp<CR>
noremap <leader>w :bn<CR>

" Close buffer
noremap <leader>c :bd<CR>

" Clean search (highlight)
nnoremap <silent> <leader><space> :noh<cr>

" Switching windows
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l
noremap <C-h> <C-w>h
noremap <Tab> <C-w><C-w>

" Vmap for maintain Visual Mode after shifting > and <
vmap < <gv
vmap > >gv

" Move visual block
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv

"************************************************
"" Custom Filtetype configs
"************************************************
autocmd FileType c setlocal tabstop=4 shiftwidth=4 expandtab
autocmd FileType cpp setlocal tabstop=4 shiftwidth=4 expandtab

"************************************************
"" Convenience variables
"************************************************
" vim-airline
let g:airline#extensions#tabline#enabled = 1
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

let g:airline_powerline_fonts=1

if !exists('g:airline_powerline_fonts')
    let g:airline_left_sep = ''
    let g:airline_left_alt_sep = '»'
    let g:airline_right_sep = ''
    let g:airline_right_alt_sep = '«'
    let g:airline_symbols.colnr = ' C'
    let g:airline_symbols.crypt = '🔒'
    let g:airline_symbols.linenr = ' '
    let g:airline_symbols.maxlinenr = ' '
    let g:airline_symbols.branch = '⎇'
    let g:airline_symbols.paste = 'ρ'
    let g:airline_symbols.spell = 'Ꞩ'
    let g:airline_symbols.notexists = 'Ɇ'
    let g:airline_symbols.whitespace = 'Ξ'
    let g:airline#extensions#tabline#left_sep = ' '
    let g:airline#extensions#tabline#left_alt_sep = '|'
    let g:airline#extensions#branch#prefix     = '⤴' "➔, ➥, ⎇
    let g:airline#extensions#readonly#symbol   = '⊘'
    let g:airline#extensions#linecolumn#prefix = '¶'
    let g:airline#extensions#paste#symbol      = 'ρ'
else
    let g:airline#extensions#tabline#left_sep = ''
    let g:airline#extensions#tabline#left_alt_sep = ''
endif

let g:airline_mode_map = {
    \ '__':'-', 'c':'C', 'i': 'I', 'ic': 'I', 'ix': 'I',
    \ 'n': 'N', 'multi': 'M', 'ni': 'N', 'no': 'N',
    \ 'R': 'R', 'Rv': 'R', 's': 'S', 'S': 'S', '': 'S',
    \ 't': 'T', 'v': 'V', 'V': 'V', '': 'V' }
